// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.25.0
// source: bot_config.sql

package database

import (
	"context"
	"encoding/json"
	"time"

	"github.com/google/uuid"
)

const createBot = `-- name: CreateBot :one
INSERT INTO bot_config (id, created_at, updated_at, name, securities, api_key) 
VALUES ($1, $2, $3, $4, $5, 
    encode(sha256(random()::text::bytea), 'hex')
) 
RETURNING id, created_at, updated_at, name, securities, api_key
`

type CreateBotParams struct {
	ID         uuid.UUID
	CreatedAt  time.Time
	UpdatedAt  time.Time
	Name       string
	Securities json.RawMessage
}

func (q *Queries) CreateBot(ctx context.Context, arg CreateBotParams) (BotConfig, error) {
	row := q.db.QueryRowContext(ctx, createBot,
		arg.ID,
		arg.CreatedAt,
		arg.UpdatedAt,
		arg.Name,
		arg.Securities,
	)
	var i BotConfig
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Securities,
		&i.ApiKey,
	)
	return i, err
}

const getBotByAPIKey = `-- name: GetBotByAPIKey :one
SELECT id, created_at, updated_at, name, securities, api_key FROM bot_config WHERE api_key = $1
`

func (q *Queries) GetBotByAPIKey(ctx context.Context, apiKey string) (BotConfig, error) {
	row := q.db.QueryRowContext(ctx, getBotByAPIKey, apiKey)
	var i BotConfig
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Name,
		&i.Securities,
		&i.ApiKey,
	)
	return i, err
}
